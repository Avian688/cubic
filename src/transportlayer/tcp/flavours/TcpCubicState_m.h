//
// Generated file, do not edit! Created by opp_msgtool 6.1 from transportlayer/tcp/flavours/TcpCubicState.msg.
//

#ifndef __INET__TCP_TCPCUBICSTATE_M_H
#define __INET__TCP_TCPCUBICSTATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {
namespace tcp {

struct TcpCubicStateVariables;

}  // namespace tcp
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/transportlayer/tcp/flavours/TcpTahoeRenoFamilyState_m.h" // import inet.transportlayer.tcp.flavours.TcpTahoeRenoFamilyState


namespace inet {
namespace tcp {

/**
 * Struct generated from transportlayer/tcp/flavours/TcpCubicState.msg:25 by opp_msgtool.
 */
struct TcpCubicStateVariables : ::inet::tcp::TcpTahoeRenoFamilyStateVariables
{
    TcpCubicStateVariables();
    int fast_convergence = 1;
    int max_increment = 16;
    int beta = 717;
    int bic_scale = 41;
    int tcp_friendliness = 0;
    uint32_t cube_rtt_scale = 0;
    uint32_t beta_scale = 0;
    uint64_t cube_factor = 0;
    uint32_t last_max_cwnd = 0;
    uint32_t loss_cwnd = 0;
    uint32_t last_cwnd = 0;
    uint32_t last_time = 0;
    uint32_t bic_origin_point = 0;
    uint32_t bic_K = 0;
    uint32_t delay_min = 0;
    uint32_t epoch_start = 0;
    uint32_t ack_cnt = 0;
    uint32_t tcp_cwnd = 0;
    bool isConcave = false;
    bool isFriendly = false;
    ::omnetpp::simtime_t lastJiffyTime = SIMTIME_ZERO;
    uint32_t jiffyAcks = 0;
    uint32_t jiffyDupacks = 0;
    ::omnetpp::simtime_t rtt = 0;

  public:
    virtual std::string str() const override;
    virtual std::string detailedInfo() const override;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const TcpCubicStateVariables& a);
void __doUnpacking(omnetpp::cCommBuffer *b, TcpCubicStateVariables& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TcpCubicStateVariables& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TcpCubicStateVariables& obj) { __doUnpacking(b, obj); }


}  // namespace tcp
}  // namespace inet


namespace omnetpp {

template<> inet::tcp::TcpCubicStateVariables *fromAnyPtr(any_ptr ptr);

}  // namespace omnetpp

#endif // ifndef __INET__TCP_TCPCUBICSTATE_M_H

